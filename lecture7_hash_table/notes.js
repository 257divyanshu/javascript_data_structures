// head to majority element and majority element ii questions after studying hashtable and refer to strivers video 

// 📍 usages of hash table
// - used where fast lookups, inserts and deletes are required
// - like google search

// - now handle collision of keys

// - head to hash_table.js

// 📍 hash table implementation
// - we'll have to create our own implementation
// - size of array will be 50
// - we'll support the following operations : (a) set : adds a new key-value pair to the hash table (b) get : retrieves the value associated with the given key

// 📍 hash table
// - a data structure that stores key-value pairs in efficient manner
// - it uses a hashing function to compute an index into an array, where the desired value can be found
// - key corresponds to an index in hash table
// - this index is generated by the hash function
// - and at that index, some value is stored
// - so when we supply the key, hash function will direct us to and index, and value present at that index will be supplied to us

// 📍 hash function attributes
// - deterministic : same input should always produce the same output
// - fast : it should compute the hash value quickly
// - uniform distribution : it aims to distribute inputs evenly across the possible outputs to minimize collisions
// - collisions : should be as less as possible
// - the simple hash function we implemented causes collisions for strings which have the same set of characters with same frequency

// - head to hash_function.js

// 📍 hash function
// - is a special type of function
// - it takes a value as input
// - and converts it into fixed-size numerical value called hash code

// - head to key_value_pairs.js

// 📍 key-value pairs
// - is a way to store data
// - key is a unique identifier

// - search engine like google use distributed hash table to generates quick replies for user's queries